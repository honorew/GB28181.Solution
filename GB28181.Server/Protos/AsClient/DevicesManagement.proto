syntax = "proto3";
import "Protos/google/api/annotations.proto";
option csharp_namespace = "GB28181.Service.Protos.AsClient.DeviceManagement";

package devices;

//service and action definition
service DevicesManager {
// AddDevice
    rpc AddDevice(AddDeviceRequest) returns (AddDeviceResponse) {
    option (google.api.http) = {
      post: "/v1/DevicesManager/AddDevice"
      body: "*"
    };
  }
  //DeleteDevice
	rpc DeleteDevice(DeleteDeviceRequest) returns (DeleteDeviceResponse) {
    option (google.api.http) = {
      post: "/v1/DevicesManager/DeleteDevice"
      body: "*"
    };
  }
  //UpdateDevice
	rpc UpdateDevice(UpdateDeviceRequest) returns (UpdateDeviceResponse) {
    option (google.api.http) = {
      post: "/v1/DevicesManager/UpdateDevice"
      body: "*"
    };
  }
  //QueryDevice
    rpc QueryDevice(QueryRequest) returns (QueryDeviceResponse) {
    option (google.api.http) = {
      post: "/v1/DevicesManager/QueryDevice"
      body: "*"
    };
  }
  //QueryDeviceById
    rpc QueryDeviceById(QueryDeviceRequest) returns (QueryDeviceResponse){
    option (google.api.http) = {
      post: "/v1/DevicesManager/QueryDeviceById"
      body: "*"
    };
  }
  //CheckDuplicate
    rpc CheckDuplicate(CheckDupRequest) returns (CheckDupResponse){
    option (google.api.http) = {
      post: "/v1/DevicesManager/CheckDuplicate"
      body: "*"
    };
  }
  //QueryChannelDevices
    rpc QueryChannelDevices(QueryChannelRequest) returns(QueryChannelResponse){
    option (google.api.http) = {
      post: "/v1/DevicesManager/QueryChannelDevices"
      body: "*"
    };
  }
  //QueryParentDeviceByChildID
    rpc QueryParentDeviceByChildID(QueryParentDeviceRequest) returns (QueryParentDeviceResponse){
    option (google.api.http) = {
      post: "/v1/DevicesManager/QueryParentDeviceByChildID"
      body: "*"
    };
  }

    rpc QueryDeviceProfile(QueryDeviceProfileRequest) returns (QueryDeviceProfileResponse){
    option (google.api.http) = {
      post: "/v1/DevicesManager/AddDevice"
      body: "*"
    };
  }
  //RefreshDeviceProfile
    rpc RefreshDeviceProfile(RefreshDeviceProfileRequest) returns(RefreshDeviceProfileResponse){
    option (google.api.http) = {
      post: "/v1/DevicesManager/RefreshDeviceProfile"
      body: "*"
    };
  }
  //SearchGlobalDevices
    rpc SearchGlobalDevices(SearchGlobalDevicesRequest) returns(SearchGlobalDevicesResponse){
    option (google.api.http) = {
      post: "/v1/DevicesManager/SearchGlobalDevices"
      body: "*"
    };
  }
  //QueryGBDeviceByGBIDs
    rpc QueryGBDeviceByGBIDs(QueryGBDeviceByGBIDsRequest) returns(QueryGBDeviceByGBIDsResponse){
    option (google.api.http) = {
      post: "/v1/DevicesManager/QueryGBDeviceByGBIDs"
      body: "*"
    };
  }
}

message QueryGBDeviceByGBIDsRequest{
   repeated string gb_ids=1;
}
 
message QueryGBDeviceByGBIDsResponse{
    repeated SimpleDevice devices = 1;
}


enum GlobalSearchType{
    NoSpecified = 0;
    IPC =1;
}

message GlobalSearchDevice{
    Device device = 1;
    bool existing_device =2;
}

message SearchGlobalDevicesRequest{
    GlobalSearchType search_type=1;
}
 
message SearchGlobalDevicesResponse{
    repeated GlobalSearchDevice devices = 1;
}

message RefreshDeviceProfileRequest{
    Profile profile=1;
}
 
message RefreshDeviceProfileResponse{
}

message QueryDeviceProfileRequest{
    string device_id = 1;
}
 
message QueryDeviceProfileResponse{
   Profile profile=1;
}

message Profile{
    string device_id=1;
	repeated ProfileDetail details = 2;
	string user_name =3;         
    string password =4;
}

message ProfileDetail{
	string name =1;      
	string resolution =2;
	string RTSPURL =3;   
	int32 FPS =4;       
	string encode_type =5; 
}

message QueryByProtoTypesRequest{
    repeated ProtoType proto_types = 1;
}
 
message QueryByProtoTypesResponse{
   repeated SimpleDevice devices=1;
}

message UpdateViewNameRequest{
    string id = 1;
    string name =2;
}
 
message QueryParentDeviceRequest{
    string child_device_id=1;
}

message QueryParentDeviceResponse{
    SimpleDevice parent_device =1;
}

message QueryChannelRequest{
    string login_role_id=1;
    string parent_device_id=2;
}

message QueryChannelResponse{
    repeated SimpleDevice channel_devices=1;
}


message KeyValuePair{
    string id=1;
    string name = 2;
}

message QuerySimpleRequest{
    string user_id =1;
    string view_id = 2;
    string orderby = 3;
}

message QuerySimpleDevicesRequest{
    repeated string device_ids =1;
}
message QuerySimpleDevicesResponse{
    SEARCH_STATUS status=1;
    repeated SimpleDevice simple_devices = 2; 
}

message FuzzyQueryDeviceRequest{
    string login_role_id=1;
    string name =2;
}

message FuzzyQueryDeviceResponse{
    repeated KeyValuePair devices = 1; 
}

message QuerySimpleDeviceRequest{
    string device_id =1;
}
message QuerySimpleDeviceResponse{
    SEARCH_STATUS status=1;
    SimpleDevice simple_device = 2; 
}


enum ProtoType {
    PROTO_GB28181 = 0;
    PROTO_NVR7128 = 1;
    PROTO_NVR7128_Channel =2;
    PROTO_ONVIF = 3;
    PROTO_IPSAN=4;
}

enum PTZType {
    CAM_DOME_HIGH_SPEED=0;
    CAM_DOME=1;
    CAM_BOX=2;
    CAM_BOX_FIX=3;
}

enum ShapeType{
    NotSupport=0;
    Bullet=1;
    Dome=2;
    FixedDome=3;
}

message Device {
    string guid=1;  //device的guid 主键
    string name = 2;
    string IP = 3;
    uint32 port= 4;
    ProtoType protocol_type =5;  //用以区别设备接入时采用的协议类型,必须存储
    string description =6;
    double  geo_long=7; //
    double  geo_lat=8;
    uint32 ptz_type = 9;         //PTZ类型,      
    string GB_ID=10;
    string GB_Parent_ID=11;
    MediaInfo media_detail = 12; 
	repeated LoginUser login_user = 13;  //登陆设备的用户信息
	repeated string tag=14;   //对设备做的标注，比如打个标签，用于检索和参数携带，允许多个标注
	repeated uint32 media_srcType=15;      //设备的提供数据类型（提供视频/音频/文本数据/二进制数据包，0 for nil ,1 for video 2 for audio 3 for binary
    string parent_ID=16;
    ShapeType shape_type =17;
    string language_format_shape_type=18;
}

message SimpleDevice{
    string guid=1;  //device的guid 主键
    string name =2;
    ProtoType protocol_type =3;  //用以区别设备接入时采用的协议类型,必须存储
    string IP = 4;
    uint32 port= 5;
    string GB_ID=6;
    string GB_Parent_ID=7;
    repeated LoginUser users =8;
    string device_id = 9;
    string channel_id=10;
    string primary_id=11;
    string sub_id=12;
    string parent_id=13;
    ShapeType shape_type =14;
    Profile profile =15;
}    

 message LoginUser {
	string login_name=1; //登陆设备所需要的用户名
	string login_pwd=2; //登陆设备所需要的密码
}

//设备分类
message DeviceCategory {
    uint64 category_id = 1;
    string name = 2;
    string description = 3;
}

message MediaInfo {
    uint32 video_encode=1; //视频编码,  //1 for h264 2 for h265 3 for svac
	uint32 audio_encode=2; //音频编码 //1 for AAC 2 for G729 3 for MP3
	uint32 video_width =3; //视频分辨率宽
	uint32 video_height=4; //视频分辨率高
	uint32 profile=5; //默认的配置
}

//设备属性集详情
message DeviceDetails {
    string guid = 1;
    uint32 ptz_type = 2;
    string manufacturer = 3;
    string model_number = 4;
    string vendor_name=5;
    uint32 video_encode=6;
    uint32 audio_encode=7;
    bool is_video_device=8;
}

message DeviceItemEvent {
    string guid = 1;
    string name = 2;
    string description = 3;
    DeviceOperation device_operation = 4;
    string operator_id = 5;
    int64 timestamp = 6;
}

enum DeviceOperation {
    DOP_UNKNOWN=0;
    DOP_CREATE=1;
    DOP_DELETE=2;
    DOP_UPDATE=3;
    DOP_QUERY=4;
}

// AddDeviceRequest
message AddDeviceRequest {
    repeated Device device=1;
    string login_role_id=2;
}

// AddDeviceResponse
message AddDeviceResponse {
    repeated string duplicate_names =1;
    repeated string channel_create_failed_name=2;
    int32 success_import_number =3;
    int32 failed_import_number = 4;
    OP_RESULT_STATUS status= 5;
}

message DeleteDeviceRequest {
    repeated string devices_id = 1;
}

message DeleteDeviceResponse {
    OP_RESULT_STATUS status= 1;
    repeated Device device_item =2; 
}

message UpdateDeviceRequest {
    string login_role_id=1;
    repeated Device device_item =2;
}

message UpdateDeviceResponse {
    OP_RESULT_STATUS status= 1;
    repeated Device device_item =3;
}

message QueryRequest {
    QueryCondition query_condition = 1;
    OrderBy orderby = 2; 
    bool IsAscend =3;
    int32 page_number = 4;      //page number
    int32 count_per_page = 5;  // item count of per page.
    string loginRoleId = 6;//  当前登录的角色 ID
    string language = 7;
}

enum OrderBy{
    Name = 0;
    Ip = 1;
    Port =2;
    ProtocolType = 3;
}

message QueryCondition{
    string device_name= 1;
    string ip = 2;
    repeated ProtoType protocol_types=3;
    int32 port=4;   
}

message QueryDeviceRequest{
    string device_id=1;
}

message QueryDeviceResponse {
    SEARCH_STATUS status=1;
    repeated Device devices =2;
    int32 total_count = 3;
    int32 total_page = 4;
}

message CheckDupRequest {
    uint64 timestamp=1;
    Category category =2;
    repeated string checkValue = 3;
}

message CheckDupResponse {
    CHECKDUPL_RESULT status= 1;
    repeated string duplValue =2;
    string msg = 3;
}

enum Category {
    Category_Role=0;
    Category_User=1;
    Category_Device=2;
    Category_View = 3;
}
enum CHECKDUPL_RESULT {
    CHECKDUPL_DUPL=0;
    CHECKDUPL_NODUPL=1;
    CHECKDUPL_FAILED=2;
}

enum OP_RESULT_STATUS {
    OP_SUCCESS=0;
    OP_EXCEPTION=1;
    OP_NAMEDUPLICATE=2;
    OP_RESOURCEOCCURREDEXCEPTION=3;
}

enum SEARCH_STATUS {
    SEARCH_IN_PROGRESS =0;
    SEARCH_FINISHED=1;
    SEARCH_EXCEPTION=2;
}

enum DeviceMessageTopic{
    DeviceChange=0;
}

message DeviceChangeMessage{
    string deviceID=1;
    string ip=2;
    int32 port=3;
    string loginName=4;
    string loginPwd=5;
    enum Action{
        Add = 0;
        Update = 1;
        Delete = 2;
    }
    Action action=6;
    string deviceName=7;
    string GB_ID=8;
    string GB_Parent_ID=9;
    string channel_id=10;
    string DVRID=11;
    string primary_id=12;
    string sub_id=13;
    ProtoType proto_type=14;
    string parent_id=15;
    ShapeType shape_type =16;
}